---
title: "Final (Putting together)"
author: "Alon Robbins, Will Dean"
format: 
  html:
    code-fold: show
    toc: true
    number-sections: true
    embed-resources: true
editor: visual
execute:
  echo: true
  message: false
  warning: false
---

## Final Assignment â€“ Putting Together

![](https://pulseclimbing.com.au/wp-content/uploads/2022/10/HAND.jpg){alt="Crimping ain't easy - Pulse"}

### Load libraries

```{r}
library(tidyverse)
```

### Load injury risk function

```{r}
source("injury_risk.R")
```

### Generate random data for hours & experience

```{r}
# Generate random data for hours and experience

# Randomly generate hours (between 1 and 6 hours)
hours_values <- sample(1:6, 20, replace = TRUE)

# Randomly generate experience levels
experience_levels <- sample(c("beginner", "intermediate", "skilled", "pro"), 20, replace = TRUE)

# Create a data frame of the random combinations
random_data <- data.frame(hours = hours_values, experience = experience_levels)

# View the generated random data
head(random_data)

```

### Using for loop to calculate injury risk

```{r}
# Initialize empty vectors to store the injury risks and statuses
injury_risk_results_for <- numeric(length = nrow(random_data))
status_results_for <- character(length = nrow(random_data))

# Loop over the rows and calculate the injury risk and status for each combination
for (i in 1:nrow(random_data)) {
  result <- compute_injury_risk(
    random_data$hours[i], 
    random_data$experience[i], 
    hold_size = "medium", 
    hold_type = "pinch"
  )
  injury_risk_results_for[i] <- result$injury_risk
  status_results_for[i] <- result$status
}

# Add the injury risk and status results to the random data frame
random_data$injury_risk_for <- injury_risk_results_for
random_data$status_for <- status_results_for

# View the updated data with injury risk
head(random_data)


```

### Using pmap

```{r}
# Using the purrr package's pmap function to run the same calculations
injury_risk_results_pmap <- pmap(
  list(hours = random_data$hours, 
       experience = random_data$experience),
  ~compute_injury_risk(..1, ..2, hold_size = "medium", hold_type = "pinch")
)

# Extract injury risk and status from the pmap output
injury_risk_values <- sapply(injury_risk_results_pmap, function(x) x$injury_risk)
status_values <- sapply(injury_risk_results_pmap, function(x) x$status)

# Add the injury risk and status results to the random data frame
random_data$injury_risk_pmap <- injury_risk_values
random_data$status_pmap <- status_values

# View the updated data with injury risk
head(random_data)


```

### Visualizing the results

```{r}
ggplot(random_data, aes(x = hours, y = injury_risk_pmap, color = experience)) +
  geom_point(size = 4, alpha = 0.7) +  # Points with transparency for better clarity
  geom_smooth(method = "lm", se = FALSE, aes(group = experience), size = 1.2, linetype = "solid") +  # Thicker line and solid style
  scale_color_manual(values = c("beginner" = "#1f77b4", "intermediate" = "#ff7f0e", "skilled" = "#2ca02c", "pro" = "#d62728")) +  # Manual color scale
  labs(
    title = "Injury Risk by Experience Level and Hours",
    x = "Climbing Hours",
    y = "Injury Risk"
  ) +
  theme_minimal() +
  theme(
    legend.position = "top",  # Move the legend to the top
    legend.title = element_text(size = 14, face = "bold"),  # Make legend title bold and larger
    legend.text = element_text(size = 12),  # Increase legend text size
    axis.title = element_text(size = 14),  # Increase axis title size
    axis.text = element_text(size = 12),   # Increase axis label size
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5),  # Center and make title bold
    panel.grid.major = element_line(size = 0.5, color = "gray90"),  # Customize grid lines
    panel.grid.minor = element_line(size = 0.25, color = "gray95")  # Adjust minor grid lines
  )



```
